
UART_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2f  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071a  00000000  00000000  00000ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048a  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039d  00000000  00000000  00002019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  7a:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDirection>:



void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_voidSetPinDirection+0x6>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_voidSetPinDirection+0xe4>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_voidSetPinDirection+0x72>
		{
			switch(Copy_u8PortID)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_voidSetPinDirection+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_voidSetPinDirection+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_voidSetPinDirection+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_voidSetPinDirection+0x5c>
  9a:	08 95       	ret
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_voidSetPinDirection+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_voidSetPinDirection+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinDirection+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinDirection+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_voidSetPinDirection+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_voidSetPinDirection+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinDirection+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinDirection+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
  f4:	41 11       	cpse	r20, r1
  f6:	37 c0       	rjmp	.+110    	; 0x166 <DIO_voidSetPinDirection+0xe4>
		{
			switch(Copy_u8PortID)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 f0       	breq	.+36     	; 0x120 <DIO_voidSetPinDirection+0x9e>
  fc:	28 f0       	brcs	.+10     	; 0x108 <DIO_voidSetPinDirection+0x86>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	d9 f0       	breq	.+54     	; 0x138 <DIO_voidSetPinDirection+0xb6>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	29 f1       	breq	.+74     	; 0x150 <DIO_voidSetPinDirection+0xce>
 106:	08 95       	ret
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
 108:	2a b3       	in	r18, 0x1a	; 26
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_voidSetPinDirection+0x92>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_voidSetPinDirection+0x8e>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0xaa>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0xa6>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
 136:	08 95       	ret
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0xbe>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_voidSetPinDirection+0xda>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_voidSetPinDirection+0xd6>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_voidSetPinValue>:
	}

}
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
 168:	68 30       	cpi	r22, 0x08	; 8
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_voidSetPinValue+0x6>
 16c:	6f c0       	rjmp	.+222    	; 0x24c <DIO_voidSetPinValue+0xe4>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	a1 f5       	brne	.+104    	; 0x1da <DIO_voidSetPinValue+0x72>
		{

			switch(Copy_u8PortID)
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	89 f0       	breq	.+34     	; 0x198 <DIO_voidSetPinValue+0x30>
 176:	28 f0       	brcs	.+10     	; 0x182 <DIO_voidSetPinValue+0x1a>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	c9 f0       	breq	.+50     	; 0x1ae <DIO_voidSetPinValue+0x46>
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	11 f1       	breq	.+68     	; 0x1c4 <DIO_voidSetPinValue+0x5c>
 180:	08 95       	ret
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinValue+0x26>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinValue+0x22>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
 198:	28 b3       	in	r18, 0x18	; 24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinValue+0x3c>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinValue+0x38>
 1a8:	82 2b       	or	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	08 95       	ret
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_voidSetPinValue+0x52>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_voidSetPinValue+0x4e>
 1be:	82 2b       	or	r24, r18
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	08 95       	ret
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
 1c4:	22 b3       	in	r18, 0x12	; 18
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_voidSetPinValue+0x68>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_voidSetPinValue+0x64>
 1d4:	82 2b       	or	r24, r18
 1d6:	82 bb       	out	0x12, r24	; 18
 1d8:	08 95       	ret

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
 1da:	41 11       	cpse	r20, r1
 1dc:	37 c0       	rjmp	.+110    	; 0x24c <DIO_voidSetPinValue+0xe4>
		{
			switch(Copy_u8PortID)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 f0       	breq	.+36     	; 0x206 <DIO_voidSetPinValue+0x9e>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_voidSetPinValue+0x86>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	d9 f0       	breq	.+54     	; 0x21e <DIO_voidSetPinValue+0xb6>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	29 f1       	breq	.+74     	; 0x236 <DIO_voidSetPinValue+0xce>
 1ec:	08 95       	ret
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x92>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x8e>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	8b bb       	out	0x1b, r24	; 27
 204:	08 95       	ret
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_voidSetPinValue+0xaa>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_voidSetPinValue+0xa6>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0xc2>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0xbe>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	85 bb       	out	0x15, r24	; 21
 234:	08 95       	ret
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
 236:	22 b3       	in	r18, 0x12	; 18
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetPinValue+0xda>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetPinValue+0xd6>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	82 bb       	out	0x12, r24	; 18
 24c:	08 95       	ret

0000024e <DIO_voidGetBitValue>:
u8 DIO_voidGetBitValue(u8 copy_u8PortID , u8 copy_PinID )
{

	u8 Local_PinVal ;

	switch(copy_u8PortID)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	81 f0       	breq	.+32     	; 0x272 <DIO_voidGetBitValue+0x24>
 252:	28 f0       	brcs	.+10     	; 0x25e <DIO_voidGetBitValue+0x10>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	b9 f0       	breq	.+46     	; 0x286 <DIO_voidGetBitValue+0x38>
 258:	83 30       	cpi	r24, 0x03	; 3
 25a:	f9 f0       	breq	.+62     	; 0x29a <DIO_voidGetBitValue+0x4c>
 25c:	27 c0       	rjmp	.+78     	; 0x2ac <DIO_voidGetBitValue+0x5e>
	{

	case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,copy_PinID)   ; break ;
 25e:	89 b3       	in	r24, 0x19	; 25
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidGetBitValue+0x1a>
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidGetBitValue+0x16>
 26c:	98 2f       	mov	r25, r24
 26e:	91 70       	andi	r25, 0x01	; 1
 270:	1d c0       	rjmp	.+58     	; 0x2ac <DIO_voidGetBitValue+0x5e>
	case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,copy_PinID)   ; break ;
 272:	86 b3       	in	r24, 0x16	; 22
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_voidGetBitValue+0x2e>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_voidGetBitValue+0x2a>
 280:	98 2f       	mov	r25, r24
 282:	91 70       	andi	r25, 0x01	; 1
 284:	13 c0       	rjmp	.+38     	; 0x2ac <DIO_voidGetBitValue+0x5e>

	case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,copy_PinID)   ; break ;
 286:	83 b3       	in	r24, 0x13	; 19
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidGetBitValue+0x42>
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidGetBitValue+0x3e>
 294:	98 2f       	mov	r25, r24
 296:	91 70       	andi	r25, 0x01	; 1
 298:	09 c0       	rjmp	.+18     	; 0x2ac <DIO_voidGetBitValue+0x5e>

	case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,copy_PinID)   ; break ;
 29a:	80 b3       	in	r24, 0x10	; 16
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_voidGetBitValue+0x56>
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_voidGetBitValue+0x52>
 2a8:	98 2f       	mov	r25, r24
 2aa:	91 70       	andi	r25, 0x01	; 1

	}

	return Local_PinVal ;

}
 2ac:	89 2f       	mov	r24, r25
 2ae:	08 95       	ret

000002b0 <main>:
#include "DIO_interface.h"
#include "UART_interface.h"

int main()
{
	DIO_voidSetPinDirection(PORTB_ID, PIN0, PIN_INPUT);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_ID, PIN0, PIN_HIGH); // Button pull up
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_voidSetPinValue>
	
	DIO_voidSetPinDirection(PORTD_ID,PIN0 , PIN_INPUT);
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD_ID, PIN1, PIN_OUTPUT);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDirection>
	
	UART_Init();
 2d8:	0e 94 82 01 	call	0x304	; 0x304 <UART_Init>
	
	while (1)
	{
		if(DIO_voidGetBitValue(PORTB_ID,PIN0)!= 1){
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_voidGetBitValue>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <main+0x40>
			
			UART_Send('1');
 2e8:	81 e3       	ldi	r24, 0x31	; 49
 2ea:	0e 94 90 01 	call	0x320	; 0x320 <UART_Send>
 2ee:	f6 cf       	rjmp	.-20     	; 0x2dc <main+0x2c>
			
		}
		
		else if(DIO_voidGetBitValue(PORTB_ID,PIN0)==1) {
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_voidGetBitValue>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	81 f7       	brne	.-32     	; 0x2dc <main+0x2c>
			
			UART_Send('0');
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	0e 94 90 01 	call	0x320	; 0x320 <UART_Send>
 302:	ec cf       	rjmp	.-40     	; 0x2dc <main+0x2c>

00000304 <UART_Init>:
	CLR_BIT(temp, 4);
	CLR_BIT(temp, 3);
	SET_BIT(temp, 1);
	SET_BIT(temp, 2);
	SET_BIT(temp, 7);
	UCSRC=temp;
 304:	86 e8       	ldi	r24, 0x86	; 134
 306:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	89 b9       	out	0x09, r24	; 9
	SET_BIT(UCSRB, 3);
 30c:	8a b1       	in	r24, 0x0a	; 10
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB, 4);
 312:	8a b1       	in	r24, 0x0a	; 10
 314:	80 61       	ori	r24, 0x10	; 16
 316:	8a b9       	out	0x0a, r24	; 10
	CLR_BIT(UCSRB, 2);
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	8b 7f       	andi	r24, 0xFB	; 251
 31c:	8a b9       	out	0x0a, r24	; 10
 31e:	08 95       	ret

00000320 <UART_Send>:

}
void UART_Send(u8 data)
{
	while(GET_BIT(UCSRA, 5) !=1 );
 320:	5d 9b       	sbis	0x0b, 5	; 11
 322:	fe cf       	rjmp	.-4      	; 0x320 <UART_Send>
	UDR=data;
 324:	8c b9       	out	0x0c, r24	; 12
 326:	08 95       	ret

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
